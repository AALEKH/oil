# Toil wrapped in Github Actions.

name: oil
on: [push]
jobs:
  dummy_orig:
    runs-on: ubuntu-latest
    # container: oilshell/toil-dummy
    env:
      REPO_ROOT: ${{ github.workspace }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: dummy
        run: |
          cd $REPO_ROOT
          services/toil-worker.sh run-dummy

      - name: publish-html
        env:
          # for deploying to dashboard
          TOIL_KEY: ${{ secrets.TOIL_KEY }}
        run: |
          cd $REPO_ROOT
          services/github-actions.sh publish-html

  dummy:
    runs-on: ubuntu-20.04
    # container: oilshell/toil-dummy
    env:
      REPO_ROOT: ${{ github.workspace }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2

      - name: install
        run: |
          # It's already installed
          # sudo apt-get install -y podman

          # Hack for Docker.  We write this file from inside the container and
          # outside.
          dir=$REPO_ROOT/_tmp/toil
          mkdir -p $dir
          sudo chmod --verbose 777 $dir
          ls -l -d $dir

      - name: dummy
        run: |
          # Podman gets rid of _tmp/toil permission error.
          # We write into that directory afterward and then deploy the whole
          # thing.
          docker=docker
          #docker=podman
          image=docker.io/oilshell/toil-dummy

          time $docker pull $image
          $docker run \
              --mount "type=bind,source=$REPO_ROOT,target=/app/oil" \
              $image \
              sh -c 'cd /app/oil; services/toil-worker.sh run-dummy'

      - name: publish-html
        env:
          # for deploying to dashboard
          TOIL_KEY: ${{ secrets.TOIL_KEY }}
        run: |
          cd $REPO_ROOT
          services/github-actions.sh publish-html

  dev-minimal:
    # https://github.com/actions/virtual-environments
    # there's no python-pip on ubuntu-latest?
    runs-on: ubuntu-20.04
    env:
      REPO_ROOT: ${{ github.workspace }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: install
        run: |
          # Hack for Docker
          dir=$REPO_ROOT/_tmp/toil
          mkdir -p $dir
          sudo chmod --verbose 777 $dir
          ls -l -d $dir

      - name: dev-minimal
        run: |
          docker=docker
          image=docker.io/oilshell/toil-dev-minimal

          time $docker pull $image
          $docker run \
              --mount "type=bind,source=$REPO_ROOT,target=/app/oil" \
              $image \
              sh -c 'cd /app/oil; services/toil-worker.sh run-dev-minimal'

      - name: publish-html
        env:
          # for deploying to dashboard
          TOIL_KEY: ${{ secrets.TOIL_KEY }}
        run: |
          cd $REPO_ROOT
          services/github-actions.sh publish-html

  other-tests:
    runs-on: ubuntu-18.04
    env:
      REPO_ROOT: ${{ github.workspace }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: install
        run: |
          # this is an overapproximation
          build/dev.sh ubuntu-deps

      - name: other-tests
        run: |
          cd $REPO_ROOT
          services/toil-worker.sh run-other-tests

      - name: publish-html
        env:
          # for deploying to dashboard
          TOIL_KEY: ${{ secrets.TOIL_KEY }}
        run: |
          cd $REPO_ROOT
          services/github-actions.sh publish-html

  ovm-tarball:
    runs-on: ubuntu-18.04
    env:
      REPO_ROOT: ${{ github.workspace }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: install
        run: |
          # this is an overapproximation
          build/dev.sh ubuntu-deps
          build/dev.sh install-py2  # flake8, etc.
          build/dev.sh install-py3  # MyPy

      - name: ovm-tarball
        run: |
          cd $REPO_ROOT
          services/toil-worker.sh run-ovm-tarball

      - name: publish-html
        env:
          # for deploying to dashboard
          TOIL_KEY: ${{ secrets.TOIL_KEY }}
        run: |
          cd $REPO_ROOT
          services/github-actions.sh publish-html

  cpp:
    runs-on: ubuntu-18.04
    env:
      REPO_ROOT: ${{ github.workspace }}
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: install
        run: |
          # this is an overapproximation
          build/dev.sh ubuntu-deps
          build/dev.sh install-py2  # flake8, etc.
          build/dev.sh install-py3  # MyPy

      - name: cpp
        run: |
          cd $REPO_ROOT
          services/toil-worker.sh run-cpp

      - name: publish-html
        env:
          # for deploying to dashboard
          TOIL_KEY: ${{ secrets.TOIL_KEY }}
        run: |
          cd $REPO_ROOT
          services/github-actions.sh publish-html
