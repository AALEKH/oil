"""
asdl/NINJA_subgraph.py
"""

from __future__ import print_function

from build.ninja_lib import asdl_cpp, log, NinjaVars

# Linking _bin/cxx-dbg/mycpp-examples/parse depends on expr.asdl.o
DEPS_CC = {
    'parse': ['_gen/mycpp/examples/expr.asdl.cc'],
}

# We need IMPLICIT header dependencies too.
# Compiling _build/obj-mycpp/cxx-asan/parse.o depends brings parse_preamble.h,
# which brings in expr.asdl.h
DEPS_H = {
    'parse': [ '_gen/mycpp/examples/expr.asdl.h',
               '_gen/asdl/hnode.asdl.h',
             ],
}

def cc_binary(
    n,
    main_cc,
    asdl_deps=[],  # causes implicit header dep for compile action, and .o for link action
    matrix=[],  # $compiler $variant
    ):

  # Actions:
  #   compile_one main_cc
  #   link with objects, including GC runtime

  # So then asdl_cpp() also has to generated
  #
  #   compile_one of the .cc file, respecting matrix

  for compiler, variant in matrix:
    compile_vars, link_vars = NinjaVars(compiler, variant)

  pass


def NinjaGraph(n):
  n.comment('Generated by %s' % __name__)
  n.newline()

  n.rule('asdl-cpp',
         command='_bin/shwrap/asdl_main $action $asdl_flags $in $out_prefix $debug_mod',
         description='asdl_main $action $asdl_flags $in $out_prefix $debug_mod')
  n.newline()

  # For pretty printing
  asdl_cpp(n, 'asdl/hnode.asdl', pretty_print_methods=False)

  # For unit tests
  asdl_cpp(n, 'asdl/examples/demo_lib.asdl')
  asdl_cpp(n, 'asdl/examples/typed_arith.asdl')
  asdl_cpp(n, 'asdl/examples/typed_demo.asdl')

  # TODO: can remove current dir
  cc_binary(n, 'asdl/gen_cpp_test.cc')
  cc_binary(n, 'asdl/gc_test.cc')
