#!/usr/bin/env python2
"""
build/NINJA_subgraph.py

Directory structure:

# These are the code generators.  Could nested like asdl/asdl_main too
_bin/
  shwrap/
    asdl_main
    mycpp_main
    lexer_gen

# These
_build/
  NINJA/  # part of the Ninja graph
    asdl.asdl_main/
      all-pairs.txt
      deps.txt

  gen/
    asdl/
      hnode_asdl.{cc,h}
    bin/
      osh_eval.mycpp.cc  -- suffix is the generator
    core/
      runtime_asdl.{cc,h}
      optview.h
    frontend/
      syntax_asdl.{cc,h}
      types_asdl.{cc,h}
    mycpp/
      examples/
        expr_asdl.{cc,h}
        containers.mycpp.cc
        containers_raw.mycpp.cc
        containers.pea.cc
        containers_raw.pea.cc

# C code shared with the Python build
# eventually this can be moved into Ninja
_devbuild/
  gen/
    osh-lex.h
    osh-types.h
    id.h
    grammar_nt.h

    runtime_asdl.py

build/
  NINJA-steps.sh  # for building stubs
"""

from __future__ import print_function

import os
import subprocess
import sys

def log(msg, *args):
  if args:
    msg = msg % args
  print(msg, file=sys.stderr)


def NinjaGraph(n):

  n.comment('Generated by %s' % __file__)
  n.newline()

  # Preprocess one translation unit
  n.rule('write-shwrap-py',
         # $in must start with main program
         command='build/NINJA-steps.sh write-shwrap py $out $in',
         description='make-pystub $out $in')
  n.newline()

  n.rule('write-shwrap-mycpp',
         # $in must start with main program
         command='build/NINJA-steps.sh write-shwrap mycpp $out $in',
         description='make-pystub $out $in')
  n.newline()

  # build/app-deps.sh asdl-tool gives us the dependencies
  # It filters with build/app-deps/filter-py-tool.txt

  with open('_build/NINJA/asdl.asdl_main/deps.txt') as f:
    deps = [line.strip() for line in f]

  # Put it at the front manually
  main_py = 'asdl/asdl_main.py'
  deps.remove(main_py)  # raises ValueError

  n.build('_bin/shwrap/asdl_main', 'write-shwrap-py', [main_py] + deps)
  n.newline()

  # This committed file is genereated by build/app-deps.sh
  with open('mycpp/NINJA/mycpp.mycpp_main/deps.txt') as f:
    deps = [line.strip() for line in f]

  main_py = 'mycpp/mycpp_main.py'
  deps.remove(main_py)  # raises ValueError

  n.build('_bin/shwrap/mycpp_main', 'write-shwrap-mycpp', [main_py] + deps)
  n.newline()

