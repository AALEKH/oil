#!/usr/bin/env python2
"""
build/NINJA_subgraph.py

Directory structure:

_bin/
  pystub/
    asdl_tool
    lexer_gen

build/
  NINJA-steps.sh
"""

from __future__ import print_function

import os
import subprocess
import sys

def log(msg, *args):
  if args:
    msg = msg % args
  print(msg, file=sys.stderr)


def NinjaGraph(n):

  n.comment('Build tools')
  n.comment('Generated by %s.' % __file__)
  n.newline()

  # Preprocess one translation unit
  n.rule('write-py-stub',
         # $in must start with main program
         command='build/NINJA-steps.sh write-stub py $out $in',
         description='make-pystub $out $in')
  n.rule('write-mycpp-stub',
         # $in must start with main program
         command='build/NINJA-steps.sh write-stub mycpp $out $in',
         description='make-pystub $out $in')
  n.newline()

  # build/app-deps.sh asdl-tool gives us the dependencies
  # It filters with build/app-deps/filter-py-tool.txt

  p = subprocess.Popen(['build/app-deps.sh', 'py-tool', 'asdl.asdl_main'], stdout=subprocess.PIPE)
  deps = [line.strip() for line in p.stdout]
  status = p.wait()
  if status != 0:
    raise AssertionError(status)

  # Put it at the front manually
  main_py = 'asdl/asdl_main.py'
  deps.remove(main_py)  # raises ValueError

  n.build('_bin/pystubs/asdl_main', 'write-py-stub', [main_py] + deps)

  # This committed file is genereated by build/app-deps.sh
  with open('mycpp/NINJA/mycpp.mycpp_main.FILTERED.txt') as f:
    deps = [line.strip() for line in f]

  main_py = 'mycpp/mycpp_main.py'
  deps.remove(main_py)  # raises ValueError

  n.build('_bin/pystubs/mycpp_main', 'write-mycpp-stub', [main_py] + deps)

