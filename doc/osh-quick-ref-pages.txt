
OSH Quick Reference with Examples
=================================

This file gets converted to HTML and do a directory of .txt files for use in
OSH.

Meta-variables for
  foo        :  string
  out.txt    :  output file
  input.txt  : input file
  /some/dir/ : file system path
  $myvar     : var
  echo, ls   : a command

  echo foo >out.txt
  read myvar <input.txt


Sections on help
- usage line (auto-generated?)
  read [options] [VARNAME ...]  # default variable is REPLY
- list of flags
- EXAMPLES 
- ADVICE / STYLE
  - Don't use this.  Use something else.
  - also: conversion to Oil!
    - [[ is preferred, but 'test [' is also valid

#### <INTRO> Introduction

### <Overview> Overview

OSH is a shell.


### <Usage> Usage

## <osh-usage> Usage of the OSH Binary
osh accepts POSIX sh flags, with the following differences:

  -n           -- only validate the syntax.  Also prints the AST.
  --show-ast   -- print the AST in addition to executing.
  --ast-format -- what format the AST should be in

# Same as osh --help, man osh

## <oil-usage> Usage of the Oil Binary
oil MAIN_NAME [ARG]...
MAIN_NAME [ARG]...

oil behaves like busybox.  If it's invoked through a symlink like 'osh', then
it behaves like that binary.  Otherwise the binary name can be passed as an
argument, like:

    oil osh -c 'echo hi'

# Same as oil --help, man oil

#### <COMMAND-LANGUAGE> Command Language

### <Commands> Commands

## <simple-command> Simple Commands
Simple commands are separated by words:
    ls /

Redirects can also appear anywhere
    echo hi 1>&2

## <semicolon> Semi-colon  ;
;  -- separate statements

## <case> case
## <if> if

#### <ASSIGNING-VARIABLES> Assigning Variables

#### <WORD-LANGUAGE> Word Language

#### <OTHER-SHELL-SUBLANGUAGES> Other Shell Sublanguages

#### <BUILTIN-COMMANDS> Builtin Commands

OSH aims to have almost all of the builtins that bash does.  Here they are,
divided into sections.

### <I/O> I/O Builtins

These builtins take input and output.  They are often used with redirects[1].

[1] help redirects

## <read> read
Usage: read -p 

Or maybe get rid of #END -- it can just go until the next # command.  It's a
little bit like the spec tests honestly.  Can copy sh_specpy

### <Run-Code> Run Code
source .   eval

### <Set-Options> Set Shell Options
set   X shopt

### <Working-Dir> Builtins - Working Dir
cd   pwd   pushd   popd   dirs

### <Completion> Completion
complete   X compgen   X compopt

### <Shell-Process> Shell Process Control
exec   exit   X logout 
umask   X ulimit   X trap   X times

### <Child-Process> Child Process Control
jobs   wait   ampersand &
X fg   X bg   X disown 

### <Introspection> Builtins That Introspect

## <help> help
Usage:
  help <topic>   -- show help on a given topic
  help toc       -- list help topics
  help osh-usage -- same as osh --help
  help oil-usage -- same as oil --help

View on the web: http://www.oilshell.org/$VERSION/doc/osh-quick-ref.html

## <hash> hash

## <caller> caller

## <type> type

### <External> Builtins That Are Like External Commands

External: bash has builtins that replace these external commands, but OSH
doesn't)

## <getopt> getopt

use /usr/bin/getopt

## <kill> kill

bash accepts job control syntax

## <enable> enable

Bash has this, but OSH won't implement it.

#### <SHELL-OPTIONS> Shell Options


And there is stuff in the middle for HTML only?

#case

case: case WORD in [PATTERN [| PATTERN]...) COMMANDS ;;]... esac
    Execute commands based on pattern matching.

    Selectively execute COMMANDS based upon WORD matching PATTERN.  The
    `|' is used to separate multiple patterns.

    Exit Status:
    Returns the status of the last command executed.
 
Examples:

    case


