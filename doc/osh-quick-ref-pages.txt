## OSH Quick Reference with Examples

## This file gets converted to HTML and do a directory of .txt files for use in
## OSH.

## IDEA
## This is a short, dense, and slightly opinionated overview of OSH, a
## bash-compatible shell.

## I'm writing a single text file that serves as all of:
## - the online HTML manual
## - in-shell help
##  - the man page.
## 
## Format:
## - Flat namespace of tags:  #let  #pipe  etc.
## - SINGLE FILE.  Must be short enough for a single file.
## 
## - Some parts can also be turned into man pages, e.g. #osh-usage and #oil-usage.
## 
## Idea: Examples from SPEC TESTS.  Hm.  You could have a file#label spec test
## or something.

## Format of this file
## 
## Lines that begin with two or more # signs are special.
##
## 2: comment that is omitted
## 3, 4, 5: three levels of sections.
##
## These are turned into <h2> <h3> <h4> tags in HTML, with <a> anchors.
## In help text.


## Meta-variables for
##   foo        :  string
##   out.txt    :  output file
##   input.txt  : input file
##   /some/dir/ : file system path
##   $myvar     : var
##   echo, ls   : a command
## 
##   echo foo >out.txt
##   read myvar <input.txt

## Sections on help
## - usage line (auto-generated?)
##   read [options] [VARNAME ...]  # default variable is REPLY
## - list of flags
## - EXAMPLES 
## - ADVICE / STYLE
##   - Don't use this.  Use something else.
##   - also: conversion to Oil!
##     - [[ is preferred, but 'test [' is also valid

##### <INTRO> Introduction

#### <Overview> Overview

### <overview>

OSH is a shell.


#### <Usage> Usage

### <bundle-usage> Usage of the Oil App Bundle
Usage: oil.ovm MAIN_NAME [ARG]...
       MAIN_NAME [ARG]...

oil.ovm behaves like busybox.  If it's invoked through a symlink, e.g. 'osh',
then it behaves like that binary.  Otherwise the binary name can be passed as
the first argument, e.g.:

    oil.ovm osh -c 'echo hi'

### <osh-usage> Usage of the OSH Binary
Usage: osh [OPTION]... SCRIPT [ARG]...
       osh [OPTION]... -c COMMAND [ARG]...

osh accepts POSIX sh flags, with the following differences:

  -n             only validate the syntax.  Also prints the AST.
  --show-ast     print the AST in addition to executing.
  --ast-format   what format the AST should be in

## Same as osh --help, man osh

### <oil-usage> Usage of the Oil Binary
Usage: oil [OPTION]... SCRIPT [ARG]...
       oil [OPTION]... -c COMMAND [ARG]...

TODO: any changes?
## Same as oil --help, man oil

### <config> Configuration Files

If the --rcfile flag is specified, osh and oil will source that on startup.

Otherwise they source ~/.config/oil/oshrc and ~/.config/oil/oilrc,
respectively.

To disable startup files, pass --rcfile /dev/null.

### startup

### <line-editing> Line Editing

Oil currently has support for building against GNU readline.

### <prompt> Customizing the Prompt String

OSH supports bash-compatible $PS1 syntax.

#### <Lexing> Lexing

#### <Oil Lexing> Oil Lexing

### <single-command> The % Prefix Starts a Single Command Over Multiple Lines

This special lexer mode has several use cases:

Long command lines without trailing \

    % chromium-browser
      --no-proxy-server
      # comments allowed
      --incognito

Long pipelines or and-or chains without trailing \ 

    % find .
    # exclude tests
    | grep -v '_test.py'
    | xargs wc -l
    | sort -n

    %  ls /
    && ls /bin
    && ls /lib
    || error "oops"

Using {} for brace expansion, rather than the start of a block:

    % echo {alice,bob}@example.com
    %
    echo next   # blank line or bare % required to end the command

NOTE: This should be valid without % :

    ls *.[ch]

Using Oil syntax at an OSH shell prompt:

    $   echo hi >&2    # POSIX sh syntax
    $ % echo hi > !2   # Oil syntax

##### <COMMAND-LANGUAGE> Command Language

The command language is specified by the POSIX shell grammar.

#### <Commands> Commands

### <simple-command> Simple Commands
Simple commands are separated by words:
    ls /

Redirects can also appear anywhere
    echo hi 1>&2

### <semicolon> Semi-colon  ;
;  -- separate statements

#### <Conditional> Conditional Constructs

### <case> case
### <if> if

### <true false colon :>

### <bang !>

### <and && or ||>

### <dbracket [[>
For conditionals.

#### <Conditional> Iteration Constructs

### <while until>

### <for for-expr>

#### <Grouping> Grouping Constructs

### <function>

### <block>

### <subshell>

#### <Concurrency>

### <pipe>

### <ampersand &>

#### <Redirects>

### <redir-file>

### <redir-desc>

### <here-doc>

#### <Other> Other Commands

### <dparen ((>

### <time>

### <coproc>


##### <ASSIGNING-VARIABLES> Assigning Variables

#### <Keywords> Assignment Keywords

#### <Operators> Assignment Operators

#### <Compound-Data> Compound Data Structures


##### <WORD-LANGUAGE> Word Language

#### <Quotes>

#### <Substitutions>

#### <Special-Vars> Special Variables

#### <Var-Ops> Operations on Variables


##### <OTHER-SHELL-SUBLANGUAGES> Other Shell Sublanguages

#### <Arithmetic> 

#### <Boolean> 

#### <Patterns> 

#### <Brace-Expand> Brace Expansion

##### <BUILTIN-COMMANDS> Builtin Commands

OSH aims to have almost all of the builtins that bash does.  Here they are,
divided into sections.

#### <I/O> I/O Builtins

These builtins take input and output.  They are often used with redirects[1].

[1] help redirects

### <read> read
Usage: read -p 

Or maybe get rid of #END -- it can just go until the next # command.  It's a
little bit like the spec tests honestly.  Can copy sh_specpy

#### <Run-Code> Run Code
source .   eval

#### <Set-Options> Set Shell Options
set   X shopt

#### <Working-Dir> Builtins - Working Dir
cd   pwd   pushd   popd   dirs

#### <Completion> Completion

### <complete>

Register completion policies for different commands.

### <compgen>

Generate completion candidates inside a user-defined completion function.

### <compopt>

Change completion options inside a user-defined completion function.

### <compadjust>

Adjust COMP_ARGV according to specified delimiters, and optionally set
variables cur, prev, words (an array), and cword.  May also set 'split'.

This is an OSH extension that makes it easier to run the bash-completion
project.

#### <Shell-Process> Shell Process Control
exec   exit   X logout 
umask   X ulimit   X trap   X times

#### <Child-Process> Child Process Control
jobs   wait   ampersand &
X fg   X bg   X disown 

#### <Introspection> Builtins That Introspect

### <help> help
Usage:
  help <topic>   -- show help on a given topic
  help toc       -- list help topics
  help osh-usage -- same as osh --help
  help oil-usage -- same as oil --help

View on the web: http://www.oilshell.org/$VERSION/doc/osh-quick-ref.html

### <hash> hash

### <caller> caller

### <type> type

#### <External> Builtins That Are Like External Commands

External: bash has builtins that replace these external commands, but OSH
doesn't)

### <getopt> getopt

use /usr/bin/getopt

### <kill> kill

bash accepts job control syntax

### <enable> enable

Bash has this, but OSH won't implement it.

##### <SHELL-OPTIONS> Shell Options


#### <Parsing> Parsing Options

#### <Execution> Execution Options

#### <OSH-Options> Options Only in OSH

##### <ENVIRONMENT-VARIABLES> Environment Variables

##### <SPECIAL-VARIABLES> Special Variables

#### <Platform>

#### <Call Stack>

#### <Tracing>

#### <Process State>

#### <Process Stack>

#### <Shell State>

#### <Completion>

### <COMP_WORDS>

An array of words, split by : and = for compatibility with bash.  New
completion scripts should use COMP_ARGV instead.

### <COMP_CWORD>

Discouraged; for compatibility with bash.

### <COMP_LINE>

Discouraged; for compatibility with bash.

### <COMP_POINT>

Discouraged; for compatibility with bash.

### <COMPREPLY>

User-defined completion functions should Fill this array with candidates.  It
is cleared on every completion request.

### <COMP_ARGV>

An array of partial command arguments to complete.  Preferred over COMP_WORDS.
The compadjust builtin uses this variable.

##### <PLUGINS-AND-HOOKS> Plugins and Hooks

#### <Signals> Signals

#### <Traps> Traps

#### <Words> Words

### <PS1> PS1

First line of a prompt.

### <PS2> PS2

Second line of a prompt.

### <PS3> PS3

For the 'select' builtin (unimplemented).

### <PS4> PS4

For 'set -o xtrace'.  The leading character is special.

##### <OIL-EXTENSINOS> Oil Extensions

##### <OIL-LIBRARIES> Oil Libraries

#### <Builtin-Procs> Builtins Procs

#### <Builtin-Procs> Builtins Funcs

### <strftime> strftime()

Useful for logging callbacks.  NOTE: bash has this with the obscure 
printf '%(...)' syntax.
