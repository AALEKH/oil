OSH Quick Reference

- Below is a list of topics, organized into [Sections].
- The X prefix means "unimplemented".
- HTML version: https://www.oilshell.org/release/0.7.pre4/doc/osh-quick-ref.html

INTRO
  [Overview]      overview   osh-vs-oil   command-vs-expr
  [Usage]         bundle-usage   osh-usage   oil-usage   config   startup
                  line-editing   prompt
  [Lexing]        comments #   line-continuation \
  [Oil Lexing]    single-command %%%   docstring ###

COMMAND LANGUAGE
  [Commands]      simple-command   semicolon ;
  [Conditional]   case   if   true   false   colon :
                  bang !   and &&   or ||   dbracket [[
  [Iteration]     while   until   for   for-expr-sh ((
  [Control Flow]  break   continue   return   exit
  [Grouping]      function   block {   subshell (
  [Concurrency]   pipe   |   X |&
                  ampersand &
  [Redirects]     redir-file  >  >>  >|  <  <>   X &>
                  redir-desc  >&  <&
                  here-doc    <<  <<-  <<<
  [Other]         dparen ((   time   X coproc   X select
  [Oil Keywords]  func   return   do   pass   fs
                  (Change parsing so they can't be builtins)

ASSIGNING VARIABLES
  [Operators]     assign        str='xyz'
                  append        str+='abc'
  [Compound Data] array         array=(a b c)   array[1]=B   "${a[@]}"
                  assoc         assoc=(['a']=1 ['b']=2)   assoc['x']=b
  [Builtins]      local   readonly   export   unset   shift
                  declare   typeset   X let
  [Oil Keywords]  var   setvar   X auto
X [Coil Keywords] const   try   catch   throw   switch   match
                  data   enum   module   interface   namespace

OIL EXPRESSION LANGUAGE
X [Data Types]    Str           r'\'   c"\n"   multiline r""" c'''
                  Bool          true false
                  Int           1_000_000
                  Float         3.14
                  Array[]       @[ls -l]  @[T F F]  @[1 2 3]  @[1.5 2.5] 
                  Tuple[]       ()  tup(42)  (42, "foo")
                  List          [1, 'str', false]  (for JSON compatibility)
                  Dict[]        {name: 'oil'}  {['name']: 'oil'}  {name}
                  Null          null
                  Regex         /d+/
                  Func          func(x) { return x+1 }
X [Comprehension] Array, List, Dict
X [Operators]     unary         -a
                  binary        a+b   base^exp  a xor b  p div q
                  ternary       a if cond else b
                  subscript     a[b, c]   a[start:end]
                  chain         pass a => f(y, z) => var new
                  getattr       d->key is like d['key'] or d.key
                  scope-attr    module::name
  [Functions]     inline-call   echo $strfunc(x, y) @arrayfunc(z)
                  X func-decl   func inc(a Int, b Int = 1) Int { ... }
  [Regexes]       re-literal    /d+/
                  re-compound   ~  ()  :()  or  sequence
                  re-primitive  %zero  @other_pattern  'sq'  "dq"  $x  ${x}
                  named-classes dot   digit   space   word   d   s   w
                  class-literal [a-z 'abc' \\ \xFF \u0100]
                  re-flags      ignorecase etc.
                  re-multiline  ///
                  re-api        if   for   sub()   split()  findall()

WORD LANGUAGE
  [Quotes]        quotes        'abc'  $'\n'  "$var"
  [Substitutions] com-sub       $(command)   `command`
                  var-sub       ${var}
                  arith-sub     $((1 + 2))
                  tilde-sub     ~/src
                  proc-sub      diff <(sort L.txt) <(sort R.txt)
  [Special Vars]  special-vars  $@  $*  $#     $?  $-     $$  $!
  [Var Ops]       op-test       ${x:-default}  
                  op-unary      ${x%%suffix}  etc.
                  op-str        ${x//y/z}
                  op-slice      ${a[@]:0:1}
                  op-format     ${x@P}
  [Oil Word]      splice        @array @ARGV
                  X oil-printf    ${x %.3f}
                  X oil-format    ${x|html}

OTHER SHELL SUBLANGUAGES
  [Arithmetic]    arith-context Where legacy arithmetic is allowed
                  num-literals  0xFF  0755  etc.
                  math          1 + 2*3
                  arith-logical !a && b
                  bitwise       ~a ^ b
                  arith-assign  a *= 2
  [Boolean]       dbracket      [[ vs. the test builtin
                  bool-expr       [[ ! $x && $y || $z ]]
                                test ! $x -a $y -o $z
                  bool-infix    [[ $a -nt $b ]]  [[ $x == $y ]]
                  bool-path     [[ -d /etc ]]
                  bool-str      [[ -z '' ]]
                  bool-other    [[ -o errexit ]]
  [Patterns]      glob          *.py
                  extglob       @(*.py|*.sh)
                  regex         [[ foo =~ [a-z]+ ]]
  [Brace Expand]  braces        {alice,bob}@example.com
  [History]       histsub       !$  !!  !n

BUILTIN COMMANDS
  [I/O]           read   echo 
                  X readarray   X mapfile
  [Run Code]      source .   eval   trap
  [Set Options]   set   shopt
  [Working Dir]   cd   pwd   pushd   popd   dirs
  [Completion]    complete   compgen   compopt   compadjust
  [Shell Process] exec   X logout 
                  umask   X ulimit   X times
  [Child Process] jobs   wait   ampersand &
                  fg   X bg   X disown 
  [External]      test [   printf   getopts   X kill
  [Introspection] help   hash   type   X caller
  [Word Lookup]   command   builtin
  [Interactive]   alias   unalias   history   X fc   X bind
X [Unsupported]   enable
  [Oil Builtins]  cd   X shopt   X env   compatible, and takes a block
                  X fork   X wait        replaces & and (), takes a block
                  X use                  source with namespace, file-relative 
                  X dirname   X basename optimizations
                  X opts                 getopts replacement
                  push                   sugar for 'do array.push( @(a b) )'
                  repr                   Show debug representation of vars
                  X log   X die          common functions (polyfill)
                  X getline              Instead of read -raw :name
                  X json-echo   X json-read  
                  X tsv2-echo   X tsv2-read

SHELL OPTIONS
  [Errors]        nounset   pipefail   errexit   inherit_errexit
  [Globbing]      noglob   failglob   nullglob
  [Debugging]     xtrace   X verbose   X extdebug
  [Interactive]   emacs   vi
  [Other]         X noclobber
  [all:strict]                           All options starting with 'strict_'
                  strict_argv            No empty argv
                  strict_array           Arrays don't decay to strings
                  strict_arith           Fatal parse errors (on by default)
                  strict_errexit         Disallow code that ignores failure
                  strict_eval_builtin    eval takes exactly 1 argument
                  strict_control_flow    Do we need this?  Special builtins?
                  strict_word_eval       Expose unicode and slicing errors
                  X strict_tilde         Tilde subst can result in error
                  X strict_backslash     Parse the sublanguage more strictly
                  X strict_glob          Parse the sublanguage more strictly
                  X strict_trap          Function name only
  [all:oil]                              All options below and more
                  parse_at               echo @array @arrayfunc(x, y)
                  parse_brace            if true { ... }; cd ~/src { ... }
                  parse_paren            if (x > 0) ...
                  X parse_index_expr     ${a[1 + f(x)]}
                  X parse_rawc           r'\'   c'\n'   c"$x\n"
                  X longopts             test -file, read -delim, etc.
                  more_errexit           More errexit checks --  at command sub
                  simple_echo            Doesn't join args; -sep -end and --
                  simple_word_eval       No splitting, static globbing
  [all:nice]                             Makes scripts more consistent
                  parse_equals           x = 's' (for cleaner config blocks)
                  parse_set              instead of setvar
                  X no_old_builtins      local/declare/etc.  pushd/popd/dirs
                                         source  unset  printf  [un]alias
                                         getopts
                  X no_old_syntax        [[   $(( ))  ${x%prefix}   $$
                                         $'\n'   @(*.sh|*.py)  `echo comsub`
                                         ${a[@]}
                  X simple_test_builtin  Only file tests, remove [, status 2

ENVIRONMENT VARIABLES
  [Shell Options] SHELLOPTS   X BASHOPTS
  [Other Vars]    HOME   PATH   IFS
  [Oil Paths]     ?builtins   ?completion_plugins   ?coprocesses

SPECIAL VARIABLES
  [Oil]           ARGV   STATUS
X [Platform]      HOSTNAME   OSTYPE   BASH_VERSION   @BASH_VERSINFO
  [Call Stack]    @BASH_SOURCE   @FUNCNAME   @BASH_LINENO   
                  X @BASH_ARGV   X @BASH_ARGC
  [Tracing]       LINENO   SOURCE_NAME
  [Process State] X BASHPID   X PPID   UID   EUID   
X [Process Stack] BASH_SUBSHELL   SHLVL
X [Shell State]   BASH_CMDS   @DIRSTACK
  [Completion]    @COMP_WORDS   COMP_CWORD   COMP_LINE   COMP_POINT
                  COMP_WORDBREAKS   @COMPREPLY   X COMP_KEY   
                  X COMP_TYPE   COMP_ARGV

  [cd]            PWD   OLDPWD   X CDPATH
  [getopts]       OPTIND   OPTARG   X OPTERR
  [read]          REPLY   IFS
  [Functions]     X RANDOM   X SECONDS
  [Other]         BASH_REMATCH   @PIPESTATUS

PLUGINS AND HOOKS
  [Signals]       SIGTERM   X SIGINT   X SIGABRT   SIG...
  [Traps]         EXIT   X ERR   X DEBUG   X RETURN
  [Words]         PS1   X PS2   X PS3   PS4
  [Completion]    complete
  [Other]         X command_not_found   PROMPT_COMMAND

OIL EXTENSIONS

X [awk]           BEGIN   END   when
X [make]          rule (builtin)
X [xargs]         each (builtin)
X [find]          fs

OIL LIBRARIES

  [Builtin Funcs] join()   split()    $IFS algorithm or awk algorithm
                  len()
                  setvar()            for procs to set in outer scope
                  evalblock()         procs evaluate block to namespace
                  read(n)             better than read -n, no short reads?
                  posix::read()       raw bindings?
                  strftime()
                  hashlib
X [getopts]       ?
X [Testing]       check ?
X [Data Formats]  json   csv   tsv2   struct (binary)
X [Hash Functions]
