-- Types that don't depend on Id.  (To break dependency)

module types {
  bool_arg_type = Undefined | Path | Int | Str | Other
  redir_arg_type = Path | Desc | Here

  -- Fifteen lexer modes for OSH

  lex_mode =
    Undefined
  | Comment
  | ShCommand
  | Backtick  -- preprocessing before Outer
  | DBracket
  | SQ | DQ | DollarSQ
  | Arith
  | ExtGlob
  | VSub_1 | VSub_2 | VSub_ArgUnquoted | VSub_ArgDQ
  | BashRegex | BashRegexChars

  -- Two for printf builtin

  | PrintfOuter | PrintfPercent

  -- Oil language has 4 main modes, 2 for regexes, and 4 kinds of strings
  -- (or maybe 6 with multiline?  Not sure if that's handled in the lexer.)

  | Command   -- echo foo (should this be Block or OilBlock ?)
              -- Newlines are terminators
  | Array     -- Like Command, but {a,b} and [a-z].? and [[a-z]] are recognized.
              -- entered with @[] for array literals
  | Expr      -- echo ${a * b} $(a * b)

  | VSub_Oil  -- echo "${x %05d}" (like '%05d' % x)

              -- note: could quoted strings be shared with OSH?  Rename that
              -- to CSQ, CDQ, RawSQ, RawDQ?  Maybe disallow octal literals
              -- after the fact?
              -- OilDQ is different because it disallows `` and so forth
              -- can multiline strings share
  | SQ_Oil    -- echo '_\t_'
  | DQ_Oil    -- echo "hello $name\n"

  | SQ_Raw    -- echo r'foo'         -- TODO: identical to SQ for sh?
  | DQ_Raw    -- echo r"hello there" -- this is different than sh DQ because
                                     -- Left?  Or the same?

  -- TODO:
  -- * Multiline strings.  May require some parsing too.
  -- * Tagged strings.  Are these raw by default?

  | Regex     -- [[ is special, e.g. myregex = $/ [[a-z]]+ /
  | CharClass -- / [a-z space]+ /
              -- echo foo.[c h]  # spaces allowed?  So it must be its own
              -- mode
}
