#!/usr/bin/env python2
"""
configure.py

Generates a Ninja file which uses this layout.

examples/
  cgi.py
  containers.py

_ninja/
  tasks/        # *.txt and *.task.txt for .wwz
    typecheck/  # optionally run

    # optionally logged?
    translate/
    compile/

    test/
      python/
      cpp/
    benchmark/
      python/
      cpp/

  gen/    # source
  bin/    # binaries

Also:

- .wwz archive of all the logs.
- Turn it into HTML and link to logs.  Basically just like Toil does.

Notes for Oil: 

- escape_path() in ninja_syntax seems wrong?  It should really take $ to $$.

    return word.replace('$ ', '$$ ').replace(' ', '$ ').replace(':', '$:')

  Ninja shouldn't have used $ and ALSO used shell commands (sh -c)!  Better
  solutions:

  - Spawn a process with environment variables.
  - use % for substitution instead
"""

from __future__ import print_function

import os
import sys

sys.path.append('../vendor')
import ninja_syntax


def main(argv):
  n = ninja_syntax.Writer(open('build.ninja', 'w'))

  n.comment('Translate, compile, and test mycpp examples.')
  n.comment('Generated by %s.' % os.path.basename(__file__))
  n.newline()

  n.rule('translate',
         command='./run.sh ninja-translate $in $out',
         description='translate $in $out')
  n.newline()
  n.rule('compile',
         command='./run.sh ninja-compile $variant $in $out',
         description='compile $variant $in $out')
  n.newline()
  n.rule('task',
         command='./steps.sh task $in $out $log_out',
         description='task $in $out $log_out')
  n.newline()

  #examples = ['cgi', 'containers']
  examples = ['cgi']

  for ex in examples:
    n.build('_ninja/gen/%s.cc' % ex, 'translate', 'examples/%s.py' % ex)
    n.newline()

    # TODO: Can also parameterize by CXX: Clang or GCC.
    for variant in ['gc_debug', 'asan', 'opt']:
      n.build('_ninja/bin/%s.$variant' % ex,
              'compile',
              '_ninja/gen/%s.cc' % ex,
              variables=[('variant', variant)])
      n.newline()

      # Run the binary in two ways
      for task in ['test', 'benchmark']:
        n.build('_ninja/tasks/%s/%s.$variant.task.txt' % (task, ex),
                'task',
                '_ninja/bin/%s.$variant' % ex,
                variables=[
                  ('variant', variant),
                  # Why do I need to expand variant here?  It's not defined
                  # yet.
                  ('log_out', '_ninja/tasks/%s/%s.%s.log.txt' % (task, ex, variant)),
                ])
        n.newline()


if __name__ == '__main__':
  try:
    main(sys.argv)
  except RuntimeError as e:
    print('FATAL: %s' % e, file=sys.stderr)
    sys.exit(1)
