data Point(x Int, y Int)

data Point3(x, y, z)  # optional types

enum op { Plus, Minus }

enum comma1 {  # no trailing comma
  Times,
  Divide 
}

enum trailing_comma {  
  Times,
  Divide,
}

enum cflow {  
  Break, Continue, Return(status Int)
}

data Token(id Id, span_id Int, val Str)

enum suffix_op {
  Nullary %Token,  # note this is lexer as an Expr_Symbol
  Unary(op_id Id, arg_word Str)
}

data word(parts Array[WordPart])

# TODO: omit trailing comma
# Need to change dict syntax to @{ }
enum value {
  Str(s Str),
  AssocArray(d Map[Str, Str])
}

#
# Classes
#

class Lexer {
  func Run() {
    echo
    # TODO: Fix separators
    #echo
  };

  virtual Foo() {
    echo
  }
}

class FileReader : Reader {
  var x;
  var y;

  # TODO: should this be super() ?
  func init(super, x, y) {
    echo
  };

  override Run() {
    echo
    # TODO: Fix separators
    #echo
  }

}

use 'frontend/syntax';  # TODO: get rid of ;
use 'core/util' log, p_die, foo as bar

echo hi
