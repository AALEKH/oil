-- ASDL's builtin types are: string, int, bool

module osh
{
  -- A portion of a line.
  line_span = (int pool_index, int col, int length)

  -- A primitive token.  NOTE: val is redundant with line_span for now.  If
  -- rewrite the parser in C++, we might care for memory footprint.  But for
  -- now this is convenient.
  -- NOTE: identical strings can shared, if we care.
  token = (id id, string val, line_span? loc)

  bracket_op = 
    WholeArray(id op_id)  -- * or @
  | ArrayIndex(arith_expr expr)

  suffix_op = 
    StringUnary(id op_id, word arg_word)
  | PatSub(word pat, word? replace, bool do_all, bool do_prefix, bool do_suffix)
  -- begin is optional with ${array::1}
  | Slice(arith_expr? begin, arith_expr? length)

  word_part = 
    ArrayLiteralPart(word* words)
  | LiteralPart(token token)
  | EscapedLiteralPart(token token)
  | SingleQuotedPart(token* tokens)
  | DoubleQuotedPart(word_part* parts)
  | VarSubPart(string name,
               id? prefix_op,  -- prefix # or ! operators
               bracket_op? bracket_op
               suffix_op? suffix_op)
  | TildeSubPart(string prefix)
  | CommandSubPart(command command_list)
  | ArithSubPart(arith_expr anode)

  word = 
    TokenWord(token token)
  | CompoundWord(word_part* parts)
 
  lvalue = 
    LeftVar(string name)
  | LeftIndex(string name, arith_expr index)

  arith_expr =
    RightVar(string name)  -- eval variable 
  | ArithWord(word w)  -- a string expression
  | ArithUnary(id op_id, arith_expr child)
  | ArithBinary(id op_id, arith_expr left, arith_expr right)
  | ArithAssign(id op_id, lvalue left, arith_expr right)
  | TernaryOp(arith_expr cond, arith_expr true_expr, arith_expr false_expr)
  | FuncCall(arith_expr func, arith_expr* args)

  bool_expr =
    WordTest(word w)  -- e.g. [[ myword ]]
  | BoolBinary(id op_id, word left, word right)
  | BoolUnary(id op_id, word child)
  | LogicalNot(bool_expr child)
  | LogicalAnd(bool_expr left, bool_expr right)
  | LogicalOr(bool_expr left, bool_expr right)

  -- To reprint the here doc, we need the here_end delimiter.  But it 
  -- doesn't matter at runtime.  do_expansion is calculated from it.
  -- TODO: was_filled should be ELIMINATED from serialization format.  It's
  -- only for use at parse time.
  -- arg_word uses the same name for Here word and here doc.
  redir = 
    Redirect(id op_id, word arg_word, int fd)
  -- NOTE: arg_word is required, but must be initialized after construction.
  | HereDoc(id op_id, word? arg_word, int fd, int do_expansion,
            string here_end, bool was_filled)

  assign_scope = Global | Local
  assign_flags = Export | ReadOnly
  assign_pair = (lvalue lhs, word rhs)
  env_pair = (string name, word val)

  -- Homogeneous version
  command = 
    NoOp
  | SimpleCommand(word* words, redir* redirects, env_pair* more_env)
  | Assignment(assign_scope scope,
               assign_flags* flags,
               word* words,  -- names mentioned without a binding
               assign_pair* pairs)  -- empty redirects for polymorphism?
  | Fork(command* children)  -- shell only allows one command
  | Pipeline(command* children, bool negated, int* stderr_indices)
  -- | AndOr(command* children, and_or* ops)
  | AndOr(command* children, id op_id)
  -- A command list is used for for/if/while conditions and bodies.  No redirects.
  | CommandList(command* children)
  -- A brace group is a compound command, with redirects.
  | BraceGroup(command* children, redir* redirects)
  | Subshell(command* children, redir* redirects)
  | DParen(arith_expr child, redir* redirects)
  | DBracket(bool_expr expr, redir* redirects)
  -- do_arg_iter: whether to implicitly loop over "$@"
  | ForEach(string iter_name, word* iter_words, bool do_arg_iter,
            command* children, redir* redirects)
  -- C-style for loop.  Any of the 3 expressions can be omitted.
  | ForExpr(arith_expr? init, arith_expr? cond, arith_expr? update,
            command* children, redir* redirects)
  | While(command* children, redir* redirects)
  | Until(command* children, redir* redirects)
  | If(command* children, redir* redirects)
  | Case(word to_match, word* pat_word_list, command* children, redir* redirects)
  | FuncDef(string name, command* children, redir* redirects)

  and_or = DAmp | DPipe

  -- For now, using stderr_indices representation because it's more compact.
  -- |& in osh; |- in oil.
  -- pipe_op = Pipe | PipeAndStderr

  case_arm = (word* pat, command* action)

  -- Almost all of these can have redirects, even function defs.
  -- AndOr/Pipeline/Fork are exceptions.
  -- Fork is in its own wrapper node because it's easy to translate.
  -- Redirects are easier to translate as well if they are WITHIN each command
  -- node.

  command_hetero = 
    XNoOp
  | XSimpleCommand(word* words, redir* redirects, env_pair* more_env)
  | XAssignment(assign_scope scope,
               assign_flags flags,
               word* names,  -- names mentioned without a binding
               assign_pair* bindings)
  | XFork(command* commands)  -- shell only allows one command
  | XPipeline(command* commands, bool negated, int* op)
  | XAndOr(command* commands, and_or* ops)
  | XBlock(command* commands, redir* redirects)
  | XSubshell(command* commands, redir* redirects)
  | XDParen(arith_expr child, redir* redirects)
  | XDBracket(bool_expr child, redir* redirects)
  | XForEach(string var, word* words, command* body, redir* redirects)
  -- C-style for loop
  | XForExpr(arith_expr init, arith_expr test, arith_expr update, command* body,
            redir* redirects)
  | XWhile(command cond, command* body, redir* redirects)
  | XUntil(command cond, command* body, redir* redirects)
  | XIf(command test, command* body, command* orelse, redir* redirects)
  | XCase(string var_name, case_arm* cases, redir* redirects)
  | XFuncDef(string name, command* body, redir* redirects)
}
