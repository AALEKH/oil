-- A data type that can be executed.

-- Concept: Both osh and oil compile to this common representatino.
--
-- There is a single expression language, not one for Str, Int, Bool.
-- There should be just one way to express an operation.
-- Must have enough source location info for runtime stack traces.

-- Stretch: should it be in SSA form for further optimization?

-- IDEA: For each operation, have a fail_loc, and for each compound operation,
-- have a stack_loc?  
--
-- compound:
-- * function
-- * subshell
-- * command sub
-- * arithsub
--
-- If it's on the same line, skip it.
--
-- Operations: arith, bool operators
-- command: I guess it's the first word.  If it's "$@" or @Args then you can
-- point at that too, but print the evaluated value.
-- There aren't that many cases to think about once you have these reduced
-- operations.  It's all expressions or side effects (procs).
--
-- NameError -- the name   $(foo or bar)
-- ValueError -- the function call  f(x)
-- TypeError -- the operation


module ovm
{
  -- Variables can be special system variables or user vars.
  -- Should we represent something like $PIPESTATUS as a third option?

  -- Mode: default 0, or default ''.  I guess this happens at runtime.

  token = (id id, string val, int? span_id)

  env_pair = (string name, word val)

  var =
    SystemVar(id op_id)  -- e.g. $@ $?
  | UserVar(string name)  -- $foo.

  mut = Const | Var

  word_part = 
    SingleQuotedPart(token* tokens)
  | DoubleQuotedPart(word_part* parts)

  word = (word_part* parts)

  redir = 
    Redirect(id op_id, word arg_word, int fd)
  | HereDoc(id op_id, word? arg_word, int fd, int do_expansion,
            string here_end, bool was_filled)

  -- Only two high level constructs: command and expr.

  expr = 
    SingleQuotedLiteral(word_part* parts)  -- like Word
  | DoubleQuotedLiteral(word_part* parts)  -- like Word
  | IntLiteral()  -- oil only
  | FloatLiteral()  -- oil only
  | VarSub(var var, int span_id)

  -- TODO: what about export?  Is that always a separate command?
  -- export FOO=bar is var FOO = 'bar'; setenv FOO

  assign_scope = Global | Local
  assign_flags = Export | ReadOnly

  lvalue = 
    LeftVar(string name)  -- TODO: use token for conversion
  | LeftIndex(expr obj, expr index)

  -- issue local foo[bar]=baz
  command = 
    SimpleCommand(word* words, redir* redirects, env_pair* more_env)
  | VarDecl(mut mode, string name, expr value)
  | VarAssign(lvalue name, expr value, assign_scope scope, assign_flags flags)  
  -- osh BraceGroup / DoGroup / CommandList / etc. compile to this
  | CommandSeq(command* commands)  
  | Fork(command child)  

}
