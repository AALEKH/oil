eval_input: expr NEWLINE* ENDMARKER
test_input: test NEWLINE* ENDMARKER

array_input: array_literal NEWLINE* ENDMARKER

array_item: Lit_Chars
array_literal: (
  '@[' [WS_Space] [array_item] (WS_Space array_item)* [WS_Space] Op_RBracket
)

regex_part: Expr_Name
regex_literal: '$/' [WS_Space] [regex_part] (WS_Space regex_part)* [WS_Space] Arith_Slash

command_sub: (
  '$[' [WS_Space] [array_item] (WS_Space array_item)* [WS_Space] Op_RBracket
)

var_sub: ENDMARKER
expr_sub: Lit_Chars


expr: term (('+'|'-') term)*

# integer division is 'div'

term: factor (('*'|'/'|'div'|'%') factor)*

factor: ('+'|'-'|'~') factor | power

power: atom trailer* ['^' factor]

trailer: '(' [arglist] ')' | '[' subscriptlist ']'

# note: calling an array literal is a runtime error
atom: (
  NAME | NUMBER | array_literal | regex_literal |
  command_sub | var_sub | expr_sub
)

# Trailing commas are allowed!
arglist: expr (',' expr)* [',']
subscriptlist: expr (',' expr)* [',']


test: or_test ['if' or_test 'else' test] | func_literal
or_test: and_test ('or' and_test)*
and_test: not_test ('and' not_test)*
not_test: 'not' not_test | comparison
comparison: expr (comp_op expr)*
comp_op: '<'|'>'|'=='|'>='|'<='|'!='|'in'|'not' 'in'|'is'|'is' 'not'

func_literal: 'func'
